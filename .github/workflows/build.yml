name: build

on:
  workflow_dispatch:
  push:
    branches: ["master"]

env:
  REGISTRY: ghcr.io

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: false

jobs:
  # https://www.kenmuse.com/blog/dynamic-build-matrices-in-github-actions/
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.dataStep.outputs.myoutput }}
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@5bb6a3b3abe66fd09bbf250dce8ada94f856a703 # v30

      - name: dynamic matrix for next job
        id: dataStep
        run: |
          packages="$(nix eval --json $".#packages.x86_64-linux" --apply 'x: builtins.attrNames x' )"
          echo "myoutput=$(jq -cn --argjson packages "$packages" '{package: $packages}')" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ${{ matrix.runs-on }}

    permissions:
      packages: write

    continue-on-error: true
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        runs-on: ["ubuntu-24.04-arm", "ubuntu-latest"]
        package: ${{ fromJson(needs.generate-matrix.outputs.packages).package }}
        exclude:
          # no kvm for buildImage
          - runs-on: ubuntu-24.04-arm
            package: hello

    steps:
      - uses: actions/checkout@v4

      # https://discourse.nixos.org/t/building-docker-image-in-github-actions-leads-to-skopeo-related-issues/40636/4
      - name: Fix dockerTools.pullImage issue
        run: |
          sudo chmod 755 /run/containers
          sudo mkdir -p "/run/containers/$(id -u runner)"
          sudo chown runner: "/run/containers/$(id -u runner)"

      - uses: nixbuild/nix-quick-install-action@5bb6a3b3abe66fd09bbf250dce8ada94f856a703 # v30
        with:
          enable_kvm: true

      - uses: nix-community/cache-nix-action@aee88ae5efbbeb38ac5d9862ecbebdb404a19e69 # v6
        with:
          # The Nix store is already hash-based, so there's no need to use hashFile to bypass cachingâ€”just periodically purging it will suffice.
          primary-key: build-${{ runner.os }}-${{ runner.arch }}-${{ matrix.package }} # -${{ hashFiles('flake.lock') }}
          purge: true
          purge-last-accessed: 2629800 # 1 month
          purge-prefixes: build-${{ runner.os }}-${{ runner.arch }}-${{ matrix.package }}-
          purge-primary-key: never

      - name: build ${{ matrix.package }}
        run: |
          nix run .#${{ matrix.package }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: push ${{ matrix.package }}
        run: |
          IMAGE_NAME="$(nix eval --json $".#packages.x86_64-linux.${{ matrix.package }}" --apply 'x: "${x.imageName}"' | jq -r)"
          IMAGE_TAG="$(nix eval --json $".#packages.x86_64-linux.${{ matrix.package }}" --apply 'x: "${x.imageTag}"' | jq -r)"

          IMAGE_LOCAL_NAME="$IMAGE_NAME:$IMAGE_TAG"
          IMAGE_REGISTRY_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG"

          docker pull "$IMAGE_REGISTRY_NAME" || true

          ori_digest="$(docker inspect "$IMAGE_REGISTRY_NAME" | jq -r '.[] | .Id' || true)"
          echo ori_digest $ori_digest

          new_digest="$(docker inspect "$IMAGE_LOCAL_NAME" | jq -r '.[] | .Id' || true)"
          echo new_digest $new_digest

          if [ -z "$new_digest" ]; then
            echo failed to get new_digest
            exit 1
          fi

          if [ "$new_digest" = "$ori_digest" ]; then
            echo no change
            exit 0
          fi

          ARCH="$(docker info --format json | jq -r '.ClientInfo.Arch')"
          echo ARCH $ARCH

          docker tag "$IMAGE_LOCAL_NAME" "$IMAGE_REGISTRY_NAME-$ARCH"
          docker push "$IMAGE_REGISTRY_NAME-$ARCH"

  docker-manifest:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    needs:
      - generate-matrix
      - build-and-push

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.packages).package }}

    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@5bb6a3b3abe66fd09bbf250dce8ada94f856a703 # v30
        with:
          enable_kvm: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: manifest push ${{ matrix.package }}
        run: |
          IMAGE_NAME="$(nix eval --json $".#packages.x86_64-linux.${{ matrix.package }}" --apply 'x: "${x.imageName}"' | jq -r)"
          IMAGE_TAG="$(nix eval --json $".#packages.x86_64-linux.${{ matrix.package }}" --apply 'x: "${x.imageTag}"' | jq -r)"

          IMAGE_LOCAL_NAME="$IMAGE_NAME:$IMAGE_TAG"
          IMAGE_REGISTRY_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG"

          args=()
          if docker pull "$IMAGE_REGISTRY_NAME-arm64"; then
            args+=(--amend "$IMAGE_REGISTRY_NAME-arm64")
          fi
          if docker pull "$IMAGE_REGISTRY_NAME-amd64"; then
            args+=(--amend "$IMAGE_REGISTRY_NAME-amd64")
          fi

          if [[ ${#args[@]} -eq 0 ]]; then
            echo "No valid images"
            exit 1
          fi

          docker manifest create "$IMAGE_REGISTRY_NAME" \
            "${args[@]}"

          docker manifest push "$IMAGE_REGISTRY_NAME"
